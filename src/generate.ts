import { ProjectData, GenerationResult, StepStatus } from './types.js';
import { updateStepState, updateButtonState, showStatusMessage } from './utils.js';

export class WebsiteGenerator {
  private projectData: ProjectData | null = null;
  private generationResult: GenerationResult | null = null;

  constructor() {
    this.initializeEventListeners();
  }

  private initializeEventListeners(): void {
    const generateButton = document.getElementById('generateButton') as HTMLButtonElement;
    const projectNameInput = document.getElementById('projectName') as HTMLInputElement;
    const projectDescriptionInput = document.getElementById('projectDescription') as HTMLTextAreaElement;

    generateButton?.addEventListener('click', () => this.handleGenerate());
    
    // Allow Enter key in project name to trigger generation
    projectNameInput?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        this.handleGenerate();
      }
    });

    // Auto-resize description textarea
    projectDescriptionInput?.addEventListener('input', this.autoResizeTextarea);
  }

  private autoResizeTextarea(event: Event): void {
    const textarea = event.target as HTMLTextAreaElement;
    textarea.style.height = 'auto';
    textarea.style.height = textarea.scrollHeight + 'px';
  }

  private validateInputs(): ProjectData | null {
    const projectNameInput = document.getElementById('projectName') as HTMLInputElement;
    const projectDescriptionInput = document.getElementById('projectDescription') as HTMLTextAreaElement;

    const name = projectNameInput?.value.trim();
    const description = projectDescriptionInput?.value.trim();

    if (!name) {
      alert('Please enter a project name!');
      projectNameInput?.focus();
      return null;
    }

    if (!description) {
      alert('Please enter a project description to help AI generate a better website!');
      projectDescriptionInput?.focus();
      return null;
    }

    return {
      name,
      description,
      domain: `${name}.magical.domains`
    };
  }

  private async handleGenerate(): Promise<void> {
    const projectData = this.validateInputs();
    if (!projectData) return;

    this.projectData = projectData;

    try {
      updateStepState('generate', StepStatus.IN_PROGRESS);
      updateButtonState('generateButton', 'Generating...', true);

      const result = await this.generateWebsite(projectData);
      
      if (result.success) {
        this.generationResult = result;
        updateStepState('generate', StepStatus.COMPLETED);
        updateButtonState('generateButton', '‚úì Generated', true);
        showStatusMessage('deployStatus', '‚úì Ready to deploy');
        
        // Enable deploy button
        const deployButton = document.getElementById('deployButton') as HTMLButtonElement;
        if (deployButton) {
          deployButton.disabled = false;
        }

        alert(`üéâ Your AI website for ${projectData.domain} has been generated!`);
        
        // Trigger custom event for other modules
        window.dispatchEvent(new CustomEvent('websiteGenerated', { 
          detail: { projectData, result } 
        }));
      } else {
        throw new Error(result.error || 'Generation failed');
      }
    } catch (error) {
      updateStepState('generate', StepStatus.ERROR);
      updateButtonState('generateButton', 'Generate with AI', false);
      alert(`‚ùå Generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  private async generateWebsite(projectData: ProjectData): Promise<GenerationResult> {
    // Simulate AI generation with realistic timing
    return new Promise((resolve) => {
      setTimeout(() => {
        // Simulate successful generation
        resolve({
          success: true,
          websiteContent: this.generateMockWebsiteContent(projectData),
          preview: `https://preview.magical.domains/${projectData.name}`
        });
      }, 2000 + Math.random() * 1000); // 2-3 seconds
    });
  }

  private generateMockWebsiteContent(projectData: ProjectData): string {
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${projectData.name}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
        .header { text-align: center; margin-bottom: 40px; }
        .content { max-width: 800px; margin: 0 auto; }
    </style>
</head>
<body>
    <div class="content">
        <header class="header">
            <h1>${projectData.name}</h1>
            <p>${projectData.description}</p>
        </header>
        <main>
            <p>Welcome to ${projectData.name}! This website was generated by AI based on your description.</p>
        </main>
    </div>
</body>
</html>`;
  }

  public getProjectData(): ProjectData | null {
    return this.projectData;
  }

  public getGenerationResult(): GenerationResult | null {
    return this.generationResult;
  }
} 